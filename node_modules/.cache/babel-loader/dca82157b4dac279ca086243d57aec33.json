{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Nathan\\\\WebstormProjects\\\\chromebot.cf\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Nathan\\\\WebstormProjects\\\\chromebot.cf\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Nathan\\\\WebstormProjects\\\\chromebot.cf\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Nathan\\\\WebstormProjects\\\\chromebot.cf\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\Nathan\\\\WebstormProjects\\\\chromebot.cf\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from\"react\";var Status=/*#__PURE__*/function(_Component){_inherits(Status,_Component);function Status(props){var _this;_classCallCheck(this,Status);_this=_possibleConstructorReturn(this,_getPrototypeOf(Status).call(this,props));_this.state={color:\"grey\",message:\"getting the latest data\",xmlhttp:new XMLHttpRequest(),timeoutId:null};return _this;}_createClass(Status,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.state.xmlhttp.onreadystatechange=function(){if(_this2.state.xmlhttp.readyState===4&&_this2.state.xmlhttp.status===200){var chromebotOn=false;JSON.parse(_this2.state.xmlhttp.responseText).members.forEach(function(member){if(member.id===_this2.props.botId){chromebotOn=true;if(member.status===\"idle\"){_this2.setState({color:\"#AF7E00\",message:\"experiencing a Minor Outage\"});}else if(member.status===\"dnd\"){_this2.setState({color:\"#c65b29\",message:\"experiencing a Major Outage\"});}else{_this2.setState({color:\"#6CB83A\",message:\"operational\"});}}});if(!chromebotOn){_this2.setState({color:\"red\",message:\"Offline\",height:9});}setTimeout(function(){_this2.state.xmlhttp.open(\"GET\",\"https://discordapp.com/api/guilds/\"+_this2.props.serverId+\"/widget.json?timestamp=\"+new Date().getTime(),true);//we appecnd the current timestamp to bypass caching, it's hacky but it works. Please don't remove it unless you have a better solution.\n_this2.state.xmlhttp.send();},5000);}};this.state.xmlhttp.open(\"GET\",\"https://discordapp.com/api/guilds/\"+this.props.serverId+\"/widget.json?timestamp=\"+new Date().getTime(),true);//we append the current timestamp to bypass caching, it's hacky but it works. Please don't remove it unless you have a better solution.\nthis.state.xmlhttp.send();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){if(this.timeoutId){clearTimeout(this.timeoutId);}this.xmlhttp.abort();}},{key:\"render\",value:function render(){return React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"statusBox\",style:{backgroundColor:this.state.color}},React.createElement(\"b\",{className:\"title status\"},this.props.botName,\" is currently\",\" \",React.createElement(\"span\",{className:\"highlight\"},this.state.message),\".\")));}}]);return Status;}(Component);export default Status;","map":{"version":3,"sources":["C:/Users/Nathan/WebstormProjects/chromebot.cf/src/utils/status.js"],"names":["React","Component","Status","props","state","color","message","xmlhttp","XMLHttpRequest","timeoutId","onreadystatechange","readyState","status","chromebotOn","JSON","parse","responseText","members","forEach","member","id","botId","setState","height","setTimeout","open","serverId","Date","getTime","send","clearTimeout","abort","backgroundColor","botName"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Status extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: \"grey\",\r\n      message: \"getting the latest data\",\r\n      xmlhttp: new XMLHttpRequest(),\r\n      timeoutId: null\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.state.xmlhttp.onreadystatechange = () => {\r\n      if (\r\n        this.state.xmlhttp.readyState === 4 &&\r\n        this.state.xmlhttp.status === 200\r\n      ) {\r\n        let chromebotOn = false;\r\n        JSON.parse(this.state.xmlhttp.responseText).members.forEach(member => {\r\n          if (member.id === this.props.botId) {\r\n            chromebotOn = true;\r\n            if (member.status === \"idle\") {\r\n              this.setState({\r\n                color: \"#AF7E00\",\r\n                message: \"experiencing a Minor Outage\"\r\n              });\r\n            } else if (member.status === \"dnd\") {\r\n              this.setState({\r\n                color: \"#c65b29\",\r\n                message: \"experiencing a Major Outage\"\r\n              });\r\n            } else {\r\n              this.setState({\r\n                color: \"#6CB83A\",\r\n                message: \"operational\"\r\n              });\r\n            }\r\n          }\r\n        });\r\n        if (!chromebotOn) {\r\n          this.setState({ color: \"red\", message: \"Offline\", height: 9 });\r\n        }\r\n        setTimeout(() => {\r\n          this.state.xmlhttp.open(\r\n            \"GET\",\r\n            \"https://discordapp.com/api/guilds/\" +\r\n              this.props.serverId +\r\n              \"/widget.json?timestamp=\" +\r\n              new Date().getTime(),\r\n            true\r\n          ); //we appecnd the current timestamp to bypass caching, it's hacky but it works. Please don't remove it unless you have a better solution.\r\n          this.state.xmlhttp.send();\r\n        }, 5000);\r\n      }\r\n    };\r\n    this.state.xmlhttp.open(\r\n      \"GET\",\r\n      \"https://discordapp.com/api/guilds/\" +\r\n        this.props.serverId +\r\n        \"/widget.json?timestamp=\" +\r\n        new Date().getTime(),\r\n      true\r\n    ); //we append the current timestamp to bypass caching, it's hacky but it works. Please don't remove it unless you have a better solution.\r\n    this.state.xmlhttp.send();\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.timeoutId) {\r\n      clearTimeout(this.timeoutId);\r\n    }\r\n    this.xmlhttp.abort();\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className=\"statusBox\"\r\n          style={{\r\n            backgroundColor: this.state.color\r\n          }}\r\n        >\r\n          <b className=\"title status\">\r\n            {this.props.botName} is currently{\" \"}\r\n            <span className=\"highlight\">{this.state.message}</span>.\r\n          </b>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Status;\r\n"]},"metadata":{},"sourceType":"module"}